  # Logika sign-up
  observeEvent(input$signup_btn, {
    if (nchar(input$signup_name) > 0 && 
        nchar(input$signup_email) > 0 && 
        nchar(input$signup_password) > 0) {
      if (input$signup_email %in% rv$users$Email) {
        showNotification("Email sudah terdaftar! Gunakan email lain atau login.", type = "error")
      } else {
        rv$users <- rbind(rv$users, data.frame(
          Name = input$signup_name,
          Email = input$signup_email,
          Password = input$signup_password,
          Sent_Waste = 0,
          Processed_Waste = 0,
          stringsAsFactors = FALSE
        ))
        save_users()
        showNotification("Pendaftaran berhasil! Silakan login.", type = "message")
        update_history("login")
      }
    } else {
      showNotification("Lengkapi semua kolom!", type = "error")
    }
  })
  
  # Logika login
  observeEvent(input$login_btn, {
    if (nchar(input$login_email) > 0 && nchar(input$login_password) > 0) {
      user <- rv$users[rv$users$Email == input$login_email, ]
      if (nrow(user) > 0 && user$Password == input$login_password) {
        rv$current_user <- user
        message("Login successful for email: ", input$login_email)
        update_history("process")
      } else {
        showNotification("Email atau password salah! Silakan coba lagi atau sign-up.", type = "error")
      }
    } else {
      showNotification("Masukkan email dan password!", type = "error")
    }
  })
  
  # Tombol kembali
  observeEvent(input$back_btn, {
    go_back()
  })
  
  # Navigasi berdasarkan pilihan pengolahan
  observeEvent(input$process_submit, {
    if (input$process_choice == "no") {
      update_history("tps")
    } else {
      update_history("compost")
    }
  })
  
  # Logika TPS3R
  observeEvent(input$tps_submit, {
    if (input$kabupaten != "" && !is.null(input$kecamatan)) {
      if (input$tps_waste <= 0) {
        showNotification("Masukkan jumlah sampah yang valid!", type = "error")
      } else {
        selected_kec <- input$kecamatan
        tps <- tps3r_data[tps3r_data$Kapanewon == selected_kec & tps3r_data$Kabupaten == input$kabupaten, ]
        if (nrow(tps) == 0) {
          output$tps_result <- renderUI({
            p("Mohon maaf, tidak ada TPS3R di Kapanewon ini. Coba pilih Kapanewon lain.", style = "color: #d32f2f;")
          })
          return()
        }
        if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
          user_index <- which(rv$users$Email == rv$current_user$Email)
          if (length(user_index) == 0) {
            message("Error: No matching user index for email: ", rv$current_user$Email)
            showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
            update_history("login")
            return()
          }
          message("Updating Sent_Waste for user: ", rv$current_user$Email)
          rv$users$Sent_Waste[user_index] <- rv$users$Sent_Waste[user_index] + input$tps_waste
          rv$current_user$Sent_Waste <- rv$current_user$Sent_Waste + input$tps_waste
          save_users()
        } else {
          message("Error: Invalid current_user or email not in users.")
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
        
        output$tps_result <- renderUI({
          tagList(
            h3("Lokasi TPS3R Terdekat:"),
            p(strong("Nama PSM: "), tps$Nama_PSM[1]),
            p(strong("Jenis PSM: "), tps$Jenis_PSM[1]),
            p(strong("Alamat: "), paste(tps$Kalurahan[1], tps$Kapanewon[1], tps$Kabupaten[1], sep = ", ")),
            p(strong("No. Telp: "), tps$No_Telp[1]),
            p(strong("Detail: "), tags$a(href = tps$Gmaps_Link[1], "Lihat detail", target = "_blank")),
            leafletOutput("tps_map"),
            p("Silahkan menuju lokasi tersebut yaa!! Thank you 😊🌍", style = "color: #1b5e20; font-weight: bold;")
          )
        })
        output$tps_map <- renderLeaflet({
          leaflet() %>%
            addTiles() %>%
            addMarkers(lat = tps$Latitude[1], lng = tps$Longitude[1], popup = tps$Nama_PSM[1])
        })
      }
    } else {
      output$tps_result <- renderUI({
        p("Pilih Kabupaten dan Kapanewon terlebih dahulu.", style = "color: #d32f2f;")
      })
    }
  })
  
  # Logika perhitungan kompos
  observeEvent(input$compost_submit, {
    green <- input$green_waste
    brown <- input$brown_waste
    total_waste <- green + brown
    if (total_waste <= 0) {
      showNotification("Masukkan jumlah sampah yang valid!", type = "error")
    } else {
      compost <- (total_waste * 3) / 4
      if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
        user_index <- which(rv$users$Email == rv$current_user$Email)
        if (length(user_index) == 0) {
          message("Error: No matching user index for email: ", rv$current_user$Email)
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
        message("Updating Processed_Waste for user: ", rv$current_user$Email)
        rv$users$Processed_Waste[user_index] <- rv$users$Processed_Waste[user_index] + total_waste
        rv$current_user$Processed_Waste <- rv$current_user$Processed_Waste + total_waste
        save_users()
      } else {
        message("Error: Invalid current_user or email not in users.")
        showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
        update_history("login")
        return()
      }
      
      output$compost_result <- renderUI({
        tagList(
          h3("Hasil Perhitungan:"),
          p(sprintf("Dari %.2f kg sampah organik, kamu bisa menghasilkan sekitar %.2f kg kompos! 🎉", 
                    total_waste, compost), style = "color: #1b5e20;"),
          plotOutput("compost_plot"),
          h4("Langkah-langkah Mengompos:"),
          tags$ol(
            tags$li("Siapkan wadah kompos atau lubang di tanah."),
            tags$li("Campur sampah hijau dan cokelat dengan rasio seimbang."),
            tags$li("Jaga kelembapan seperti kain basah yang diperas."),
            tags$li("Aduk setiap 3-5 hari untuk aerasi."),
            tags$li("Tunggu 1-2 bulan hingga kompos matang.")
          ),
          p("Selamat mengompos sampah kami. Thank you ya udah mau ikut serta menjaga bumi! 🌱😊", 
            style = "color: #1b5e20; font-weight: bold;")
        )
      })
      output$compost_plot <- renderPlot({
        data <- data.frame(
          Category = c("Sampah Hijau", "Sampah Cokelat", "Kompos"),
          Weight = c(green, brown, compost)
        )
        ggplot(data, aes(x = Category, y = Weight, fill = Category)) +
          geom_bar(stat = "identity") +
          scale_fill_manual(values = c("Sampah Hijau" = "#81c784", 
                                       "Sampah Cokelat" = "#8d6e63", 
                                       "Kompos" = "#388e3c")) +
          labs(title = "Komposisi Sampah dan Hasil Kompos", y = "Berat (kg)", x = "") +
          theme_minimal() +
          theme(text = element_text(family = "Glacial Indifference"),
                title = element_text(family = "Sono"))
      })
    }
  })
}

# Run app
shinyApp(ui, server)
