library(shiny)
library(leaflet)
library(ggplot2)

# Data TPS3R dari Data TPS3R DIY.xlsx
tps3r_data <- data.frame(
  Nama_PSM = c("Jati Bening", "Pagarum Kasongan Permai", "TPS3RSRIHARDONO", "Sampah Legi", "GO-SARI", 
               "KSM", "Sampah Legi", "ksm agung rejeki", "TPS Triwidadi", "Tps pundong", 
               "tps3rksmagungrejeki", "TPS3R Jion", "ASRI", "zamzam ah", "ngudi sampurno", 
               "TPS3R Barokah", "NGAWU ASRI", "TPS 3 R NGUDI RESIK", "KSM Amrih Lestari 1", 
               "bssolo123", "tps 3r margo mulyo", "tps 3r ngudi rejeki selang", "purwo lestari", 
               "tps3r amrih lestari 2", "tps3r Rista sentosa", "bs solo", "alfandi", 
               "TPS amrih resik", "ksm sampunoasih", "TPS3R migunani", "TPS3R Kenanga Merdiko", 
               "tpst3r randualas", "tps3r mexicana", "tps3r dlhk diy"),
  Kabupaten = c("BANTUL", "BANTUL", "BANTUL", "BANTUL", "BANTUL", "BANTUL", "BANTUL", 
                "BANTUL", "BANTUL", "BANTUL", "BANTUL", "BANTUL", "BANTUL", "GUNUNGKIDUL", 
                "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", 
                "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", "GUNUNGKIDUL", 
                "GUNUNGKIDUL", "GUNUNGKIDUL", "KULON PROGO", "KULON PROGO", "KULON PROGO", 
                "KULON PROGO", "SLEMAN", "SLEMAN", "SLEMAN", "KOTA YOGYAKARTA"),
  Kapanewon = c("Pleret", "Kasihan", "Pundong", "Srandakan", "Pajangan", "Banguntapan", 
                "Srandakan", "Jetis", "Pajangan", "Pundong", "Jetis", "Piyungan", "Pajangan", 
                "Patuk", "Karangmojo", "Patuk", "Playen", "Ponjong", "Wonosari", "Wonosari", 
                "Semanu", "Wonosari", "Wonosari", "Wonosari", "Wonosari", "Karangmojo", 
                "Galur", "Wates", "Pengasih", "Sentolo", "Tempel", "Ngaglik", "Ngaglik", 
                "Gondokusuman"),
  Kalurahan = c("Wonokromo", "Bangunjiwo", "Srihardono", "Trimurti", "Guwosari", 
                "Baturetno", "Trimurti", "Sumberagung", "Triwidadi", "Srihardono", 
                "Sumberagung", "Srimulyo", "Guwosari", "Pengkok", "Bejiharjo", 
                "Nglanggeran", "Ngawu", "Ponjong", "Kepek", "Wonosari", "Semanu", 
                "Selang", "Baleharjo", "Kepek", "Siraman", "Karangmojo", "Kranggan", 
                "Ngestiharjo", "Pengasih", "Salamrejo", "Merdikorejo", "Sardonoharjo", 
                "Sinduharjo", "Baciro"),
  Latitude = c(-7.8601877607, -7.845141843, -7.9501373227, -7.9505274856, -7.8799534434, 
               -7.8148497422, -7.9386099988, -7.9005934162, -7.9052261, -7.9506473569, 
               -8.0357832686, -7.9051198, -7.890738252, -7.8426693915, -7.9644829, 
               -7.8503327977, -7.9402791933, -7.9836780246, -7.9612144853, -7.9639870496, 
               -8.0052840786, -7.9664534539, -7.9710316028, -7.8241711086, -7.9744452589, 
               -7.9835661317, -6.2410923, -7.7836552173, -7.8578133, -7.8589476, 
               -7.6445987183, -7.7179317, -7.7179864, -7.7897731),
  Longitude = c(110.3867525607, 110.3154864706, 110.3458694835, 110.2562922612, 110.3069031984, 
                110.4147886895, 110.2615647907, 110.3708152609, 110.3472513, 110.3456826314, 
                110.490720703, 110.3475856, 110.3090814874, 110.3431282361, 110.6015257, 
                110.5322003737, 110.5497725308, 110.7138670608, 110.5994953215, 110.60098093, 
                110.6566374376, 110.6194506213, 110.6056657434, 110.5969542637, 110.5941235274, 
                110.3059443086, 106.7999167, 110.3915986419, 110.1463917, 110.2323082834, 
                110.3437493742, 110.3550341, 110.355034, 110.3825095),
  Jenis_PSM = "TPS3R",
  No_Telp = "0812-3456-7890",
  Gmaps_Link = c(
    "https://sipari.jogjaprov.go.id/data_psm/detail/8ada660e06b787f245667943dc948dafab997e25",
    "https://sipari.jogjaprov.go.id/data_psm/detail/c097638f92de80ba8d6c696b26e6e601a5f61eb7",
    "https://sipari.jogjaprov.go.id/data_psm/detail/6c1e671f9af5b46d9c1a52067bdf0e53685674f7",
    "https://sipari.jogjaprov.go.id/data_psm/detail/8effee409c625e1a2d8f5033631840e6ce1dcb64",
    "https://sipari.jogjaprov.go.id/data_psm/detail/cb4e5208b4cd87268b208e49452ed6e89a68e0b8",
    "https://sipari.jogjaprov.go.id/data_psm/detail/1185401df4fc07ec0f2e42c538ab6b1bb1388264",
    "https://sipari.jogjaprov.go.id/data_psm/detail/300122350a32530a2c2103b46ed07eacdc82aff8",
    "https://sipari.jogjaprov.go.id/data_psm/detail/2c9a62c3748f484690d547c0d707aededf04fbd2",
    "https://sipari.jogjaprov.go.id/data_psm/detail/f83a383c0fa81f295d057f8f5ed0ba4610947817",
    "https://sipari.jogjaprov.go.id/data_psm/detail/edd6ebda641b723cc1bc537c49099c1d5a458138",
    "https://sipari.jogjaprov.go.id/data_psm/detail/d049c44e2fd67b6eb19a1c18c93110c0b52cab63",
    "https://sipari.jogjaprov.go.id/data_psm/detail/9d8974baddfc0e53300829f37e5fc88b0f5ce61b",
    "https://sipari.jogjaprov.go.id/data_psm/detail/ccddaf626302032b0414003d6d4ebbfe4b3f99af",
    "https://sipari.jogjaprov.go.id/data_psm/detail/93e097e319c2db13edf06f45c4dff4f741394c0d",
    "https://sipari.jogjaprov.go.id/data_psm/detail/f1e75747bc4c6d0b16f0d429b76d23f1c06153a9",
    "https://sipari.jogjaprov.go.id/data_psm/detail/456f2361d677372141da13ecbc8f27b83f5b6a15",
    "https://sipari.jogjaprov.go.id/data_psm/detail/77d67ab1e3d05296a7131e197d9d3767fb900bad",
    "https://sipari.jogjaprov.go.id/data_psm/detail/1b0a69d74c5ab68f9e3505f103f40618a51e5987",
    "https://sipari.jogjaprov.go.id/data_psm/detail/ee16ee0fa7f21a4101793582e1cf4b24fef9f948",
    "https://sipari.jogjaprov.go.id/data_psm/detail/1106a1dda2d680438ecfb0bb70fd479c55a1791f",
    "https://sipari.jogjaprov.go.id/data_psm/detail/f47aea8bdcbd1179a1f3d91e6afeeb259488f2d1",
    "https://sipari.jogjaprov.go.id/data_psm/detail/c9ca442765657fc90e9e779c34d0d2259d2c3c5b",
    "https://sipari.jogjaprov.go.id/data_psm/detail/9a79be611e0267e1d943da0737c6c51be67865a0",
    "https://sipari.jogjaprov.go.id/data_psm/detail/0ca9277f91e40054767f69afeb0426711ca0fddd",
    "https://sipari.jogjaprov.go.id/data_psm/detail/7719a1c782a1ba91c031a682a0a2f8658209adbf",
    "https://sipari.jogjaprov.go.id/data_psm/detail/9e6a55b6b4563e652a23be9d623ca5055c356940",
    "https://sipari.jogjaprov.go.id/data_psm/detail/1574bddb75c78a6fd2251d61e2993b5146201319",
    "https://sipari.jogjaprov.go.id/data_psm/detail/3b69df951b3d4c18c3cb681597fbb9bba88d799c",
    "https://sipari.jogjaprov.go.id/data_psm/detail/8ee51caaa2c2f4ee2e5b4b7ef5a89db7df1068d7",
    "https://sipari.jogjaprov.go.id/data_psm/detail/b37f6ddcefad7e8657837d3177f9ef2462f98acf",
    "https://sipari.jogjaprov.go.id/data_psm/detail/e62d7f1eb43d87c202d2f164ba61297e71be80f4",
    "https://sipari.jogjaprov.go.id/data_psm/detail/b888b29826bb53dc531437e723738383d8339b56",
    "https://sipari.jogjaprov.go.id/data_psm/detail/d54ad009d179ae346683cfc3603979bc99339ef7",
    "https://sipari.jogjaprov.go.id/data_psm/detail/450ddec8dd206c2e2ab1aeeaa90e85e51753b8b7"
  ),
  stringsAsFactors = FALSE
)

# UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      @import url('https://fonts.googleapis.com/css2?family=Sunborn:wght@400;700&display=swap');
      @import url('https://fonts.googleapis.com/css2?family=Glacial+Indifference:wght@400;700&display=swap');
      
      body { 
        font-family: 'Glacial Indifference', sans-serif; 
        background: linear-gradient(to bottom, #e8f5e9, #1b5e20), 
                    url('https://www.transparenttextures.com/patterns/leaf.png');
        background-size: cover;
        background-attachment: fixed;
        color: #ffffff; 
        margin: 0; 
        padding: 20px; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        min-height: 100vh; 
        position: relative;
      }
      .container { 
        max-width: 600px; 
        margin: auto; 
        padding: 20px; 
        background: rgba(255, 255, 255, 0.9); 
        border-radius: 10px; 
        box-shadow: 0 4px 10px rgba(0,0,0,0.2); 
        text-align: center; 
        position: relative;
        z-index: 1;
      }
      .logo-bg {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 50%;
        max-width: 300px;
        opacity: 0.4;
        z-index: -1;
      }
      .title { 
        font-family: 'Sunborn', sans-serif; 
        color: #1b5e20; 
        font-size: 2.5em; 
        margin: 20px 0 10px; 
      }
      .subtitle { 
        font-family: 'Glacial Indifference', sans-serif; 
        color: #388e3c; 
        font-size: 1.2em; 
        margin-bottom: 20px; 
      }
      h2, h3, h4 { 
        font-family: 'Sunborn', sans-serif; 
        color: #1b5e20; 
      }
      p, label, input, select { 
        font-family: 'Glacial Indifference', sans-serif; 
        color: #1b5e20; 
      }
      .btn-custom { 
        background-color: #43a047; 
        color: white; 
        border: none; 
        padding: 12px 24px; 
        font-size: 1.2em; 
        margin: 10px; 
        cursor: pointer; 
        border-radius: 5px; 
        transition: background-color 0.3s; 
      }
      .btn-custom:hover { 
        background-color: #2e7d32; 
      }
      .btn-back { 
        background-color: #fb8c00; 
        color: white; 
        border: none; 
        padding: 8px 16px; 
        font-size: 1em; 
        margin: 10px; 
        cursor: pointer; 
        border-radius: 5px; 
        transition: background-color 0.3s; 
      }
      .btn-back:hover { 
        background-color: #ef6c00; 
      }
      .info-box { 
        background-color: #e8f5e9; 
        padding: 15px; 
        border-radius: 5px; 
        margin: 10px 0; 
        border: 1px solid #81c784; 
      }
      .info-link { 
        color: #2e7d32; 
        cursor: pointer; 
        text-decoration: underline; 
        margin-left: 10px; 
      }
      .info-link:hover { 
        color: #43a047; 
      }
      .popup-box { 
        background-color: #fff; 
        padding: 20px; 
        border-radius: 5px; 
        box-shadow: 0 0 10px rgba(0,0,0,0.3); 
        margin: 20px auto; 
        max-width: 400px; 
        text-align: center; 
      }
      .user-info { 
        background-color: #e8f5e9; 
        padding: 10px; 
        border-radius: 5px; 
        margin: 10px 0; 
        text-align: center; 
        color: #1b5e20; 
        border: 1px solid #81c784; 
      }
      .user-stats { 
        font-size: 0.9em; 
        color: #388e3c; 
      }
      .emoji { 
        font-size: 1.5em; 
      }
    "))
  ),
  
  # Kontrol halaman
  uiOutput("current_page")
)

# Server
server <- function(input, output, session) {
  # File untuk menyimpan data pengguna
  user_file <- "users.rds"
  
  # Inisialisasi data pengguna
  if (file.exists(user_file)) {
    users_data <- readRDS(user_file)
    # Validasi struktur users.rds
    expected_cols <- c("Name", "Email", "Password", "Sent_Waste", "Processed_Waste")
    if (all(expected_cols %in% colnames(users_data))) {
      rv <- reactiveValues(
        page = "main", 
        history = c(), 
        users = users_data,
        current_user = NULL,
        show_green_popup = FALSE,
        show_brown_popup = FALSE
      )
    } else {
      message("Invalid users.rds structure. Initializing new users data frame.")
      rv <- reactiveValues(
        page = "main", 
        history = c(), 
        users = data.frame(
          Name = character(), 
          Email = character(), 
          Password = character(), 
          Sent_Waste = numeric(),
          Processed_Waste = numeric(),
          stringsAsFactors = FALSE
        ),
        current_user = NULL,
        show_green_popup = FALSE,
        show_brown_popup = FALSE
      )
    }
  } else {
    rv <- reactiveValues(
      page = "main", 
      history = c(), 
      users = data.frame(
        Name = character(), 
        Email = character(), 
        Password = character(), 
        Sent_Waste = numeric(),
        Processed_Waste = numeric(),
        stringsAsFactors = FALSE
      ),
      current_user = NULL,
      show_green_popup = FALSE,
      show_brown_popup = FALSE
    )
  }
  
  # Fungsi untuk memperbarui riwayat
  update_history <- function(new_page) {
    rv$history <- c(rv$history, rv$page)
    rv$page <- new_page
  }
  
  # Fungsi untuk kembali ke halaman sebelumnya
  go_back <- function() {
    if (length(rv$history) > 0) {
      rv$page <- tail(rv$history, 1)
      rv$history <- head(rv$history, -1)
    }
  }
  
  # Simpan data pengguna ke file
  save_users <- function() {
    saveRDS(rv$users, user_file)
  }
  
  # Render UI berdasarkan halaman
  output$current_page <- renderUI({
    # Tampilkan info pengguna setelah login
    user_info <- if (!is.null(rv$current_user)) {
      tagList(
        div(class = "user-info",
            p(strong(paste("Hi,", rv$current_user$Name))),
            p(class = "user-stats", paste("Sampah yang Kamu Olah:", rv$current_user$Processed_Waste, "kg"))
        )
      )
    } else {
      NULL
    }
    
    page_content <- if (rv$page == "main") {
      tagList(
        h1("Selamat Datang di Aplikasi ComVert", class = "title"),
        p("Comvert Your Waste Into Compost", class = "subtitle"),
        actionButton("start_btn", "Start", class = "btn-custom")
      )
    } else if (rv$page == "login") {
      tagList(
        h2("Login", class = "title"),
        textInput("login_email", "Email", placeholder = "Masukkan email"),
        passwordInput("login_password", "Password", placeholder = "Masukkan password"),
        actionButton("login_btn", "Login", class = "btn-custom"),
        p("Belum punya akun? ", 
          actionButton("to_signup_btn", "Sign Up", class = "btn-custom")),
        actionButton("back_btn", "Kembali", class = "btn-back")
      )
    } else if (rv$page == "signup") {
      tagList(
        h2("Sign Up", class = "title"),
        textInput("signup_name", "Nama", placeholder = "Masukkan nama"),
        textInput("signup_email", "Email", placeholder = "Masukkan email"),
        passwordInput("signup_password", "Password", placeholder = "Masukkan password"),
        actionButton("signup_btn", "Daftar", class = "btn-custom"),
        p("Sudah punya akun? ", 
          actionButton("to_login_btn", "Login", class = "btn-custom")),
        actionButton("back_btn", "Kembali", class = "btn-back")
      )
    } else if (rv$page == "process") {
      tagList(
        h2("Pilih Cara Pengolahan Sampahmu ♻️", class = "title"),
        radioButtons("process_choice", "Apakah kamu ingin mengolah sampah sendiri?",
                     choices = c("Ya" = "yes", "Tidak" = "no"), inline = TRUE),
        actionButton("process_submit", "Lanjut", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        user_info
      )
    } else if (rv$page == "tps") {
      tagList(
        h2("Pengiriman Sampah ke TPS3R 📍", class = "title"),
        selectInput("kabupaten", "Pilih Kabupaten", 
                    choices = unique(tps3r_data$Kabupaten)),
        conditionalPanel(
          condition = "input.kabupaten != ''",
          selectInput("kecamatan", "Pilih Kapanewon", choices = NULL)
        ),
        actionButton("tps_submit", "Cari TPS3R Terdekat", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        uiOutput("tps_result"),
        user_info
      )
    } else if (rv$page == "compost") {
      tagList(
        h2("Hitung Kompos dari Sampah Organikmu 🌿", class = "title"),
        div(class = "info-box",
            numericInput("green_waste", 
                         div("Berapa kg sampah hijau yang kamu punya?", 
                             actionLink("show_green_popup", "Nggak tahu apa itu sampah hijau? Klik ini", 
                                       class = "info-link")),
                         value = 0, min = 0),
            conditionalPanel(
              condition = "output.show_green_popup",
              div(class = "popup-box",
                  p("Sampah hijau merupakan sampah organik yang kaya akan nitrogen. Terdiri dari sisa buah, sayur, kulit telur, dan rumput hijau."),
                  actionButton("close_green_popup", "Tutup", class = "btn-custom")
              )
            ),
            numericInput("brown_waste", 
                         div("Berapa kg sampah cokelat yang kamu punya?", 
                             actionLink("show_brown_popup", "Nggak tahu apa itu sampah cokelat? Klik ini", 
                                       class = "info-link")),
                         value = 0, min = 0),
            conditionalPanel(
              condition = "output.show_brown_popup",
              div(class = "popup-box",
                  p("Sampah cokelat merupakan sampah organik yang kaya akan karbon. Terdiri dari daun kering, ranting kecil, dan bubuk kayu."),
                  actionButton("close_brown_popup", "Tutup", class = "btn-custom")
              )
            )
        ),
        actionButton("compost_submit", "Hitung Kompos", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        uiOutput("compost_result"),
        user_info
      )
    }
    
    tagList(
      img(src = "https://www.pngall.com/wp-content/uploads/2016/04/Leaf-PNG-Clipart.png", class = "logo-bg"),
      div(class = "container", page_content)
    )
  })
  
  # Update pilihan Kapanewon berdasarkan Kabupaten
  observe({
    kab <- input$kabupaten
    if (!is.null(kab) && kab != "") {
      kec_choices <- unique(tps3r_data$Kapanewon[tps3r_data$Kabupaten == kab])
      updateSelectInput(session, "kecamatan", choices = kec_choices)
    }
  })
  
  # Output untuk kontrol pop-up
  output$show_green_popup <- reactive({
    rv$show_green_popup
  })
  output$show_brown_popup <- reactive({
    rv$show_brown_popup
  })
  outputOptions(output, "show_green_popup", suspendWhenHidden = FALSE)
  outputOptions(output, "show_brown_popup", suspendWhenHidden = FALSE)
  
  # Toggle pop-up
  observeEvent(input$show_green_popup, {
    rv$show_green_popup <- TRUE
  })
  observeEvent(input$show_brown_popup, {
    rv$show_brown_popup <- TRUE
  })
  observeEvent(input$close_green_popup, {
    rv$show_green_popup <- FALSE
  })
  observeEvent(input$close_brown_popup, {
    rv$show_brown_popup <- FALSE
  })
  
  # Navigasi ke halaman login
  observeEvent(input$start_btn, {
    update_history("login")
  })
  
  # Navigasi ke halaman sign-up dari login
  observeEvent(input$to_signup_btn, {
    update_history("signup")
  })
  
  # Navigasi ke halaman login dari sign-up
  observeEvent(input$to_login_btn, {
    update_history("login")
  })
  
  # Logika sign-up
  observeEvent(input$signup_btn, {
    if (nchar(input$signup_name) > 0 && 
        nchar(input$signup_email) > 0 && 
        nchar(input$signup_password) > 0) {
      if (input$signup_email %in% rv$users$Email) {
        showNotification("Email sudah terdaftar! Gunakan email lain atau login.", type = "error")
      } else {
        rv$users <- rbind(rv$users, data.frame(
          Name = input$signup_name,
          Email = input$signup_email,
          Password = input$signup_password,
          Sent_Waste = 0,
          Processed_Waste = 0,
          stringsAsFactors = FALSE
        ))
        save_users()
        showNotification("Pendaftaran berhasil! Silakan login.", type = "message")
        update_history("login")
      }
    } else {
      showNotification("Lengkapi semua kolom!", type = "error")
    }
  })
  
  # Logika login
  observeEvent(input$login_btn, {
    if (nchar(input$login_email) > 0 && nchar(input$login_password) > 0) {
      user <- rv$users[rv$users$Email == input$login_email, ]
      if (nrow(user) > 0 && user$Password == input$login_password) {
        rv$current_user <- user
        message("Login successful for email: ", input$login_email)
        update_history("process")
      } else {
        showNotification("Email atau password salah! Silakan coba lagi atau sign-up.", type = "error")
      }
    } else {
      showNotification("Masukkan email dan password!", type = "error")
    }
  })
  
  # Tombol kembali
  observeEvent(input$back_btn, {
    go_back()
  })
  
  # Navigasi berdasarkan pilihan pengolahan
  observeEvent(input$process_submit, {
    if (input$process_choice == "no") {
      update_history("tps")
    } else {
      update_history("compost")
    }
  })
  
  # Logika TPS3R
  observeEvent(input$tps_submit, {
    if (input$kabupaten != "" && !is.null(input$kecamatan)) {
      selected_kec <- input$kecamatan
      tps <- tps3r_data[tps3r_data$Kapanewon == selected_kec & tps3r_data$Kabupaten == input$kabupaten, ]
      if (nrow(tps) == 0) {
        output$tps_result <- renderUI({
          p("Mohon maaf, tidak ada TPS3R di Kapanewon ini. Coba pilih Kapanewon lain.", style = "color: #d32f2f;")
        })
        return()
      }
      if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
        user_index <- which(rv$users$Email == rv$current_user$Email)
        if (length(user_index) == 0) {
          message("Error: No matching user index for email: ", rv$current_user$Email)
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
      } else {
        message("Error: Invalid current_user or email not in users.")
        showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
        update_history("login")
        return()
      }
      
      output$tps_result <- renderUI({
        tagList(
          h3("Lokasi TPS3R Terdekat:"),
          p(strong("Nama PSM: "), tps$Nama_PSM[1]),
          p(strong("Jenis PSM: "), tps$Jenis_PSM[1]),
          p(strong("Alamat: "), paste(tps$Kalurahan[1], tps$Kapanewon[1], tps$Kabupaten[1], sep = ", ")),
          p(strong("No. Telp: "), tps$No_Telp[1]),
          p(strong("Detail: "), tags$a(href = tps$Gmaps_Link[1], "Lihat detail", target = "_blank")),
          leafletOutput("tps_map"),
          p("Silahkan menuju lokasi tersebut yaa!! Thank you 😊🌍", style = "color: #1b5e20; font-weight: bold;")
        )
      })
      output$tps_map <- renderLeaflet({
        leaflet() %>%
          addTiles() %>%
          addMarkers(lat = tps$Latitude[1], lng = tps$Longitude[1], popup = tps$Nama_PSM[1])
      })
    } else {
      output$tps_result <- renderUI({
        p("Pilih Kabupaten dan Kapanewon terlebih dahulu.", style = "color: #d32f2f;")
      })
    }
  })
  
  # Logika perhitungan kompos
  observeEvent(input$compost_submit, {
    green <- input$green_waste
    brown <- input$brown_waste
    total_waste <- green + brown
    if (total_waste <= 0) {
      showNotification("Masukkan jumlah sampah yang valid!", type = "error")
    } else {
      compost <- (total_waste * 3) / 4
      if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
        user_index <- which(rv$users$Email == rv$current_user$Email)
        if (length(user_index) == 0) {
          message("Error: No matching user index for email: ", rv$current_user$Email)
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
        message("Updating Processed_Waste for user: ", rv$current_user$Email)
        rv$users$Processed_Waste[user_index] <- rv$users$Processed_Waste[user_index] + total_waste
        rv$current_user$Processed_Waste <- rv$current_user$Processed_Waste + total_waste
        save_users()
      } else {
        message("Error: Invalid current_user or email not in users.")
        showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
        update_history("login")
        return()
      }
      
      output$compost_result <- renderUI({
        tagList(
          h3("Hasil Perhitungan:"),
          p(sprintf("Dari %.2f kg sampah organik, kamu bisa menghasilkan sekitar %.2f kg kompos! 🎉", 
                    total_waste, compost), style = "color: #1b5e20;"),
          plotOutput("compost_plot"),
          h4("Langkah-langkah Mengompos:"),
          tags$ol(
            tags$li("Siapkan wadah kompos atau lubang di tanah."),
            tags$li("Campur sampah hijau dan cokelat dengan rasio seimbang."),
            tags$li("Jaga kelembapan seperti kain basah yang diperas."),
            tags$li("Aduk setiap 3-5 hari untuk aerasi."),
            tags$li("Tunggu 1-2 bulan hingga kompos matang.")
          ),
          p("Selamat mengompos sampah kami. Thank you ya udah mau ikut serta menjaga bumi! 🌱😊", 
            style = "color: #1b5e20; font-weight: bold;")
        )
      })
      output$compost_plot <- renderPlot({
        data <- data.frame(
          Category = c("Sampah Hijau", "Sampah Cokelat", "Kompos"),
          Weight = c(green, brown, compost)
        )
        ggplot(data, aes(x = Category, y = Weight, fill = Category)) +
          geom_bar(stat = "identity") +
          scale_fill_manual(values = c("Sampah Hijau" = "#81c784", 
                                       "Sampah Cokelat" = "#8d6e63", 
                                       "Kompos" = "#388e3c")) +
          labs(title = "Komposisi Sampah dan Hasil Kompos", y = "Berat (kg)", x = "") +
          theme_minimal() +
          theme(text = element_text(family = "Glacial Indifference"),
                title = element_text(family = "Sunborn"))
      })
    }
  })
}

# Run app
shinyApp(ui, server)
