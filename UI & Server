# UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      @font-face {
        font-family: 'Milky Juice';
        src: url('milky_juice.otf') format('opentype');
      }
      @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');
      
      body { 
        font-family: 'Milky Juice', 'Poppins', sans-serif; 
        background: linear-gradient(to bottom, #e8f5e9, #1b5e20), 
                    url('https://www.transparenttextures.com/patterns/leaf.png');
        background-size: cover;
        background-attachment: fixed;
        color: #ffffff; 
        margin: 0; 
        padding: 20px; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        min-height: 100vh; 
        position: relative;
      }
      .container { 
        max-width: 600px; 
        margin: auto; 
        padding: 20px; 
        background: rgba(255, 255, 255, 0.9); 
        border-radius: 10px; 
        box-shadow: 0 4px 10px rgba(0,0,0,0.2); 
        text-align: center; 
        position: relative;
        z-index: 1;
      }
      .logo-main {
        width: 50%;
        max-width: 300px;
        opacity: 1;
        margin-bottom: 20px;
      }
      .logo-bg {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 50%;
        max-width: 300px;
        opacity: 0.7;
        z-index: -1;
      }
      .title { 
        font-family: 'Milky Juice', 'Poppins', sans-serif; 
        color: #1b5e20; 
        font-size: 2.5em; 
        margin: 20px 0 10px; 
      }
      .subtitle { 
        font-family: 'Milky Juice', 'Poppins', sans-serif; 
        color: #388e3c; 
        font-size: 1.2em; 
        margin-bottom: 20px; 
      }
      h2, h3, h4 { 
        font-family: 'Milky Juice', 'Poppins', sans-serif; 
        color: #1b5e20; 
      }
      p, label, input, select { 
        font-family: 'Milky Juice', 'Poppins', sans-serif; 
        color: #1b5e20; 
      }
      .btn-custom { 
        background-color: #43a047; 
        color: white; 
        border: none; 
        padding: 12px 24px; 
        font-size: 1.2em; 
        margin: 10px; 
        cursor: pointer; 
        border-radius: 5px; 
        transition: background-color 0.3s; 
      }
      .btn-custom:hover { 
        background-color: #2e7d32; 
      }
      .btn-back { 
        background-color: #fb8c00; 
        color: white; 
        border: none; 
        padding: 8px 16px; 
        font-size: 1em; 
        margin: 10px; 
        cursor: pointer; 
        border-radius: 5px; 
        transition: background-color 0.3s; 
      }
      .btn-back:hover { 
        background-color: #ef6c00; 
      }
      .info-box { 
        background-color: #e8f5e9; 
        padding: 15px; 
        border-radius: 5px; 
        margin: 10px 0; 
        border: 1px solid #81c784; 
      }
      .info-link { 
        color: #2e7d32; 
        cursor: pointer; 
        text-decoration: underline; 
        margin-left: 10px; 
      }
      .info-link:hover { 
        color: #43a047; 
      }
      .popup-box { 
        background-color: #fff; 
        padding: 20px; 
        border-radius: 5px; 
        box-shadow: 0 0 10px rgba(0,0,0,0.3); 
        margin: 20px auto; 
        max-width: 400px; 
        text-align: center; 
      }
      .user-info { 
        background-color: #e8f5e9; 
        padding: 10px; 
        border-radius: 5px; 
        margin: 10px 0; 
        text-align: center; 
        color: #1b5e20; 
        border: 1px solid #81c784; 
      }
      .user-stats { 
        font-size: 0.9em; 
        color: #388e3c; 
      }
      .emoji { 
        font-size: 1.5em; 
      }
      .compost-steps, .compost-steps li {
        color: #000000;
      }
    "))
  ),
  
  # Kontrol halaman
  uiOutput("current_page")
)
# Server
server <- function(input, output, session) {
  # File untuk menyimpan data pengguna
  user_file <- "users.rds"
  
  # Inisialisasi data pengguna
  if (file.exists(user_file)) {
    users_data <- readRDS(user_file)
    # Validasi struktur users.rds
    expected_cols <- c("Name", "Email", "Password", "Sent_Waste", "Processed_Waste")
    if (all(expected_cols %in% colnames(users_data))) {
      rv <- reactiveValues(
        page = "main", 
        history = c(), 
        users = users_data,
        current_user = NULL,
        show_green_popup = FALSE,
        show_brown_popup = FALSE
      )
    } else {
      message("Invalid users.rds structure. Initializing new users data frame.")
      rv <- reactiveValues(
        page = "main", 
        history = c(), 
        users = data.frame(
          Name = character(), 
          Email = character(), 
          Password = character(), 
          Sent_Waste = numeric(),
          Processed_Waste = numeric(),
          stringsAsFactors = FALSE
        ),
        current_user = NULL,
        show_green_popup = FALSE,
        show_brown_popup = FALSE
      )
    }
  } else {
    rv <- reactiveValues(
      page = "main", 
      history = c(), 
      users = data.frame(
        Name = character(), 
        Email = character(), 
        Password = character(), 
        Sent_Waste = numeric(),
        Processed_Waste = numeric(),
        stringsAsFactors = FALSE
      ),
      current_user = NULL,
      show_green_popup = FALSE,
      show_brown_popup = FALSE
    )
  }
  
  # Fungsi untuk memperbarui riwayat
  update_history <- function(new_page) {
    rv$history <- c(rv$history, rv$page)
    rv$page <- new_page
  }
  
  # Fungsi untuk kembali ke halaman sebelumnya
  go_back <- function() {
    if (length(rv$history) > 0) {
      rv$page <- tail(rv$history, 1)
      rv$history <- head(rv$history, -1)
    }
  }
  
  # Simpan data pengguna ke file
  save_users <- function() {
    saveRDS(rv$users, user_file)
  }
  
  # Render UI berdasarkan halaman
  output$current_page <- renderUI({
    # Tampilkan info pengguna setelah login
    user_info <- if (!is.null(rv$current_user)) {
      tagList(
        div(class = "user-info",
            p(strong(paste("Hi,", rv$current_user$Name))),
            p(class = "user-stats", paste("Sampah yang Kamu Olah:", rv$current_user$Processed_Waste, "kg"))
        )
      )
    } else {
      NULL
    }
    
    page_content <- if (rv$page == "main") {
      tagList(
        img(src = "logo.png", class = "logo-main"),
        h1("Selamat Datang di Aplikasi ComVert", class = "title"),
        p("Convert Your Waste Into Compost", class = "subtitle"),
        actionButton("start_btn", "Start", class = "btn-custom")
      )
    } else if (rv$page == "login") {
      tagList(
        h2("Login", class = "title"),
        textInput("login_email", "Email", placeholder = "Masukkan email"),
        passwordInput("login_password", "Password", placeholder = "Masukkan password"),
        actionButton("login_btn", "Login", class = "btn-custom"),
        p("Belum punya akun? ", 
          actionButton("to_signup_btn", "Sign Up", class = "btn-custom")),
        actionButton("back_btn", "Kembali", class = "btn-back")
      )
    } else if (rv$page == "signup") {
      tagList(
        h2("Sign Up", class = "title"),
        textInput("signup_name", "Nama", placeholder = "Masukkan nama"),
        textInput("signup_email", "Email", placeholder = "Masukkan email"),
        passwordInput("signup_password", "Password", placeholder = "Masukkan password"),
        actionButton("signup_btn", "Daftar", class = "btn-custom"),
        p("Sudah punya akun? ", 
          actionButton("to_login_btn", "Login", class = "btn-custom")),
        actionButton("back_btn", "Kembali", class = "btn-back")
      )
    } else if (rv$page == "process") {
      tagList(
        h2("Pilih Cara Pengolahan Sampahmu ♻️", class = "title"),
        radioButtons("process_choice", "Apakah kamu ingin mengolah sampah sendiri?",
                     choices = c("Ya" = "yes", "Tidak" = "no"), inline = TRUE),
        actionButton("process_submit", "Lanjut", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        user_info
      )
    } else if (rv$page == "tps") {
      tagList(
        h2("Pengiriman Sampah ke TPS3R 📍", class = "title"),
        selectInput("kabupaten", "Pilih Kabupaten", 
                    choices = unique(tps3r_data$Kabupaten)),
        conditionalPanel(
          condition = "input.kabupaten != ''",
          selectInput("kecamatan", "Pilih Kapanewon", choices = NULL)
        ),
        actionButton("tps_submit", "Cari TPS3R Terdekat", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        uiOutput("tps_result"),
        user_info
      )
    } else if (rv$page == "compost") {
      tagList(
        h2("Hitung Kompos dari Sampah Organikmu 🌿", class = "title"),
        div(class = "info-box",
            numericInput("green_waste", 
                         div("Berapa kg sampah hijau yang kamu punya?", 
                             actionLink("show_green_popup", "Nggak tahu apa itu sampah hijau? Klik ini", 
                                       class = "info-link")),
                         value = 0, min = 0),
            conditionalPanel(
              condition = "output.show_green_popup",
              div(class = "popup-box",
                  p("Sampah hijau merupakan sampah organik yang kaya akan nitrogen. Terdiri dari sisa buah, sayur, kulit telur, dan rumput hijau."),
                  actionButton("close_green_popup", "Tutup", class = "btn-custom")
              )
            ),
            numericInput("brown_waste", 
                         div("Berapa kg sampah cokelat yang kamu punya?", 
                             actionLink("show_brown_popup", "Nggak tahu apa itu sampah cokelat? Klik ini", 
                                       class = "info-link")),
                         value = 0, min = 0),
            conditionalPanel(
              condition = "output.show_brown_popup",
              div(class = "popup-box",
                  p("Sampah cokelat merupakan sampah organik yang kaya akan karbon. Terdiri dari daun kering, ranting kecil, dan bubuk kayu."),
                  actionButton("close_brown_popup", "Tutup", class = "btn-custom")
              )
            )
        ),
        actionButton("compost_submit", "Hitung Kompos", class = "btn-custom"),
        actionButton("back_btn", "Kembali", class = "btn-back"),
        uiOutput("compost_result"),
        user_info
      )
    }
    
    logo_element <- if (rv$page != "main") {
      img(src = "logo.png", class = "logo-bg")
    } else {
      NULL
    }
    
    tagList(
      logo_element,
      div(class = "container", page_content)
    )
  })
  
  # Update pilihan Kapanewon berdasarkan Kabupaten
  observe({
    kab <- input$kabupaten
    if (!is.null(kab) && kab != "") {
      kec_choices <- kecamatan_data[[kab]]$Kapanewon
      updateSelectInput(session, "kecamatan", choices = kec_choices)
    }
  })
  
  # Output untuk kontrol pop-up
  output$show_green_popup <- reactive({
    rv$show_green_popup
  })
  output$show_brown_popup <- reactive({
    rv$show_brown_popup
  })
  outputOptions(output, "show_green_popup", suspendWhenHidden = FALSE)
  outputOptions(output, "show_brown_popup", suspendWhenHidden = FALSE)
  
  # Toggle pop-up
  observeEvent(input$show_green_popup, {
    rv$show_green_popup <- TRUE
  })
  observeEvent(input$show_brown_popup, {
    rv$show_brown_popup <- TRUE
  })
  observeEvent(input$close_green_popup, {
    rv$show_green_popup <- FALSE
  })
  observeEvent(input$close_brown_popup, {
    rv$show_brown_popup <- FALSE
  })
  
  # Navigasi ke halaman login
  observeEvent(input$start_btn, {
    update_history("login")
  })
  
  # Navigasi ke halaman sign-up dari login
  observeEvent(input$to_signup_btn, {
    update_history("signup")
  })
  
  # Navigasi ke halaman login dari sign-up
  observeEvent(input$to_login_btn, {
    update_history("login")
  })
  
  # Logika sign-up
  observeEvent(input$signup_btn, {
    if (nchar(input$signup_name) > 0 && 
        nchar(input$signup_email) > 0 && 
        nchar(input$signup_password) > 0) {
      if (input$signup_email %in% rv$users$Email) {
        showNotification("Email sudah terdaftar! Gunakan email lain atau login.", type = "error")
      } else {
        rv$users <- rbind(rv$users, data.frame(
          Name = input$signup_name,
          Email = input$signup_email,
          Password = input$signup_password,
          Sent_Waste = 0,
          Processed_Waste = 0,
          stringsAsFactors = FALSE
        ))
        save_users()
        showNotification("Pendaftaran berhasil! Silakan login.", type = "message")
        update_history("login")
      }
    } else {
      showNotification("Lengkapi semua kolom!", type = "error")
    }
  })
  
  # Logika login
  observeEvent(input$login_btn, {
    if (nchar(input$login_email) > 0 && nchar(input$login_password) > 0) {
      user <- rv$users[rv$users$Email == input$login_email, ]
      if (nrow(user) > 0 && user$Password == input$login_password) {
        rv$current_user <- user
        message("Login successful for email: ", input$login_email)
        update_history("process")
      } else {
        showNotification("Email atau password salah! Silakan coba lagi atau sign-up.", type = "error")
      }
    } else {
      showNotification("Masukkan email dan password!", type = "error")
    }
  })
  
  # Tombol kembali
  observeEvent(input$back_btn, {
    go_back()
  })
  
  # Navigasi berdasarkan pilihan pengolahan
  observeEvent(input$process_submit, {
    if (input$process_choice == "no") {
      update_history("tps")
    } else {
      update_history("compost")
    }
  })
  
  # Logika TPS3R dengan arah ke TPS terdekat
  observeEvent(input$tps_submit, {
    if (input$kabupaten != "" && !is.null(input$kecamatan)) {
      selected_kec <- input$kecamatan
      kab <- input$kabupaten
      kec_data <- kecamatan_data[[kab]][kecamatan_data[[kab]]$Kapanewon == selected_kec, ]
      tps_in_kec <- tps3r_data[tps3r_data$Kapanewon == selected_kec & tps3r_data$Kabupaten == kab, ]
      
      if (nrow(tps_in_kec) > 0) {
        # Ada TPS di kecamatan yang dipilih
        tps <- tps_in_kec[1, ]
      } else {
        # Ga ada TPS, cari TPS terdekat
        kec_lat <- kec_data$Latitude
        kec_lon <- kec_data$Longitude
        tps_in_kab <- tps3r_data[tps3r_data$Kabupaten == kab, ]
        distances <- apply(tps_in_kab[, c("Latitude", "Longitude")], 1, 
                           function(x) distHaversine(c(kec_lon, kec_lat), c(x["Longitude"], x["Latitude"])))
        nearest_idx <- which.min(distances)
        tps <- tps_in_kab[nearest_idx, ]
      }
      
      if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
        user_index <- which(rv$users$Email == rv$current_user$Email)
        if (length(user_index) == 0) {
          message("Error: No matching user index for email: ", rv$current_user$Email)
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
      } else {
        message("Error: Invalid current_user or email not in users.")
        showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
        update_history("login")
        return()
      }
      
      output$tps_result <- renderUI({
        tagList(
          h3("Lokasi TPS3R Terdekat:"),
          p(strong("Nama PSM: "), tps$Nama_PSM),
          p(strong("Jenis PSM: "), tps$Jenis_PSM),
          p(strong("Alamat: "), paste(tps$Kalurahan, tps$Kapanewon, tps$Kabupaten, sep = ", ")),
          p(strong("No. Telp: "), tps$No_Telp),
          p(strong("Detail: "), tags$a(href = tps$Gmaps_Link, "Lihat detail", target = "_blank")),
          leafletOutput("tps_map"),
          p("Silahkan menuju lokasi tersebut yaa!! Thank you 😊🌍", style = "color: #1b5e20; font-weight: bold;")
        )
      })
      output$tps_map <- renderLeaflet({
        leaflet() %>%
          addTiles() %>%
          addMarkers(lat = tps$Latitude, lng = tps$Longitude, popup = tps$Nama_PSM)
      })
    } else {
      output$tps_result <- renderUI({
        p("Pilih Kabupaten dan Kapanewon terlebih dahulu.", style = "color: #d32f2f;")
      })
    }
  })
  
  # Logika perhitungan kompos
  observeEvent(input$compost_submit, {
    green <- input$green_waste
    brown <- input$brown_waste
    total_waste <- green + brown
    if (total_waste <= 0) {
      showNotification("Masukkan jumlah sampah yang valid!", type = "error")
    } else {
      compost <- (total_waste * 3) / 4
      if (!is.null(rv$current_user) && rv$current_user$Email %in% rv$users$Email) {
        user_index <- which(rv$users$Email == rv$current_user$Email)
        if (length(user_index) == 0) {
          message("Error: No matching user index for email: ", rv$current_user$Email)
          showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
          update_history("login")
          return()
        }
        message("Updating Processed_Waste for user: ", rv$current_user$Email)
        rv$users$Processed_Waste[user_index] <- rv$users$Processed_Waste[user_index] + total_waste
        rv$current_user$Processed_Waste <- rv$current_user$Processed_Waste + total_waste
        save_users()
      } else {
        message("Error: Invalid current_user or email not in users.")
        showNotification("Error: Pengguna tidak valid. Silakan login ulang.", type = "error")
        update_history("login")
        return()
      }
      
      output$compost_result <- renderUI({
        tagList(
          h3("Hasil Perhitungan:"),
          p(sprintf("Dari %.2f kg sampah organik, kamu bisa menghasilkan sekitar %.2f kg kompos! 🎉", 
                    total_waste, compost), style = "color: #1b5e20;"),
          plotOutput("compost_plot"),
          h4("Langkah-langkah Mengompos:"),
          tags$ol(class = "compost-steps",
            tags$li("Siapkan wadah kompos atau lubang di tanah."),
            tags$li("Campur sampah hijau dan cokelat dengan rasio seimbang."),
            tags$li("Jaga kelembapan seperti kain basah yang diperas."),
            tags$li("Aduk setiap 3-5 hari untuk aerasi."),
            tags$li("Tunggu 1-2 bulan hingga kompos matang.")
          ),
          p("Selamat mengompos sampah kami. Thank you ya udah mau ikut serta menjaga bumi! 🌱😊", 
            style = "color: #1b5e20; font-weight: bold;")
        )
      })
      output$compost_plot <- renderPlot({
        data <- data.frame(
          Category = c("Sampah Hijau", "Sampah Cokelat", "Kompos"),
          Weight = c(green, brown, compost)
        )
        ggplot(data, aes(x = Category, y = Weight, fill = Category)) +
          geom_bar(stat = "identity") +
          scale_fill_manual(values = c("Sampah Hijau" = "#81c784", 
                                       "Sampah Cokelat" = "#8d6e63", 
                                       "Kompos" = "#388e3c")) +
          labs(title = "Komposisi Sampah dan Hasil Kompos", y = "Berat (kg)", x = "") +
          theme_minimal() +
          theme(text = element_text(family = "Milky Juice"))
      })
    }
  })
}

# Run app
shinyApp(ui, server)
